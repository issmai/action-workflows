name: Python - Build and Test - Docker Compose
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
    secrets:
      teams-workflow-url:
        required: false
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Execute build
        run: |
          docker compose build ${{ inputs.service_name }}
      - name: Save Docker image
        run: |
          docker save $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ inputs.service_name }}" | head -n 1) -o image.tar
      - name: Upload image artifact
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
      - name: Load Docker image
        run: |
          docker load -i image.tar
          echo "IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ inputs.service_name }}" | head -n 1)" >> $GITHUB_ENV
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: false
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: vuln

      # Save Trivy results as artifacts instead of uploading to GitHub Security
      - name: Generate Trivy JSON report
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}'
          format: 'json'
          output: 'trivy-results.json'
          exit-code: '0'
          ignore-unfixed: false
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: vuln

      - name: Upload Trivy JSON report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.json
          retention-days: 5
      
      # Generate chart Vuln Chart
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: python -m pip install --upgrade pip && pip install matplotlib json5

      - name: Generate Vulnerability Chart
        run: |
          python <<EOF
          import json
          import matplotlib.pyplot as plt

          # Check if file exists
          try:
              with open("trivy-results.json") as f:
                  data = json.load(f)
          except (FileNotFoundError, json.JSONDecodeError):
              print("Error: trivy-results.json is missing or invalid")
              exit(1)

          # Extract vulnerability counts
          severity_counts = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0}
          for target in data.get("Results", []):
              for vuln in target.get("Vulnerabilities", []):
                  if vuln["Severity"] in severity_counts:
                      severity_counts[vuln["Severity"]] += 1

          # Ensure chart won't fail on empty data
          if not any(severity_counts.values()):
              print("No vulnerabilities found, skipping chart creation.")
              exit(0)

          # Generate and save chart
          plt.figure(figsize=(8, 5))
          plt.bar(severity_counts.keys(), severity_counts.values(), color=["red", "orange", "yellow"])
          plt.xlabel("Severity Level")
          plt.ylabel("Number of Vulnerabilities")
          plt.title("Trivy Scan Vulnerabilities by Severity")
          max_value = max(severity_counts.values()) if any(severity_counts.values()) else 1
          plt.ylim(0, max_value + 5)
          plt.savefig("trivy_vulnerabilities_chart.png")

          EOF

      - name: Upload Vulnerability Chart
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerability-chart
          path: trivy_vulnerabilities_chart.png
          retention-days: 5

      - name: Download Trivy HTML Template
        run: |
          mkdir -p .trivy
          wget -qO .trivy/html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Generate Trivy HTML report
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}'
          format: 'template'
          exit-code: '0'
          ignore-unfixed: false
          template: '@.trivy/html.tpl'
          output: 'trivy-report.html'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: vuln

      - name: Upload Trivy HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-html-report
          path: trivy-report.html
          retention-days: 5
        

  teams-notification:
    name: "MS Teams Notification"
    needs: [build-and-test, security-scan]
    if: always()
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Send notification to Teams Workflow
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.teams-workflow-url }}
          method: 'POST'
          contentType: 'application/json'
          data: >-
            {
            "type": "message",
            "attachments": [
                {
                  "contentType": "application/vnd.microsoft.card.adaptive",
                  "content": {
                    "type": "AdaptiveCard",
                    "body": [
                      {
                        "type": "TextBlock",
                        "size": "Medium",
                        "weight": "Bolder",
                        "text": "${{ inputs.service_name }} Build Status"
                      },
                      {
                        "type": "FactSet",
                        "facts": [
                          {
                            "title": "Build Status",
                            "value": "${{ needs.build-and-test.result }}"
                          },
                          {
                            "title": "Security Scan",
                            "value": "${{ needs.security-scan.result }}"
                          },
                          {
                            "title": "Branch",
                            "value": "${{ github.ref_name }}"
                          }
                        ]
                      }
                    ],
                    "actions": [
                      {
                        "type": "Action.OpenUrl",
                        "title": "View Run",
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    ],
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "version": "1.2"
                  }
                }
              ]
            }
